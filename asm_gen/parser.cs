// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-5ML6DFM
// DateTime: 2017/12/24 17:12:01
// UserName: lt
// Input file <asm_file.y - 2017/12/24 17:11:52>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using System.IO;

namespace AsmGen
{
public enum Tokens {error=2,EOF=3,Def=4,Is=5,Rule=6,
    Operator=7,Code=8,Target=9,Not=10,And=11,Or=12,
    Imm=13,ImmValue=14,LBracket=15,RBracket=16,LSBracket=17,RSBracket=18,
    LCBracket=19,RCBracket=20,Add=21,Sub=22,Mul=23,Colon=24,
    Comma=25,NewLine=26,Id=27};

// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<object,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public object yylval;
  public LexLocation yylloc;
  public ScanObj( int t, object val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<object, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[49];
  private static State[] states = new State[81];
  private static string[] nonTerms = new string[] {
      "code_block", "$accept", "non_empty_block", "code_line", "new_lines", "function_definition", 
      "function_invokation", "rule_definitioin", "group_definitioin", "target_definitioin", 
      "function_input_list", "function_input_p1", "function_input_p2", "function_input_p3", 
      "group_list", "parameters", "non_empty_group_list", "non_empty_parameters", 
      "rule_element_list_p1", "rule_element_list_p2", "rule_element_list_p3", 
      "definitioin", "type_list", };

  static Parser() {
    states[0] = new State(new int[]{27,20,6,40,4,59,9,68,3,-2},new int[]{-1,1,-3,3,-4,17,-6,6,-15,7,-17,18,-7,38,-8,39,-9,58,-10,67});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{26,56,3,-3,20,-3},new int[]{-5,4});
    states[4] = new State(new int[]{27,20,6,40,4,59,9,68},new int[]{-4,5,-6,6,-15,7,-17,18,-7,38,-8,39,-9,58,-10,67});
    states[5] = new State(-5);
    states[6] = new State(-6);
    states[7] = new State(new int[]{27,8});
    states[8] = new State(new int[]{15,9});
    states[9] = new State(new int[]{27,79,16,-29},new int[]{-16,10,-18,75});
    states[10] = new State(new int[]{16,11});
    states[11] = new State(new int[]{27,12,19,71});
    states[12] = new State(new int[]{19,13});
    states[13] = new State(new int[]{26,56},new int[]{-5,14});
    states[14] = new State(new int[]{27,20,6,40,4,59,9,68,20,-2},new int[]{-1,15,-3,3,-4,17,-6,6,-15,7,-17,18,-7,38,-8,39,-9,58,-10,67});
    states[15] = new State(new int[]{20,16});
    states[16] = new State(-23);
    states[17] = new State(-4);
    states[18] = new State(new int[]{27,19});
    states[19] = new State(-28);
    states[20] = new State(new int[]{27,27,14,28,17,29,26,-12,3,-12,20,-12},new int[]{-11,21,-12,22,-13,35,-14,34});
    states[21] = new State(-11);
    states[22] = new State(new int[]{21,23,22,32,25,36,26,-13,3,-13,20,-13});
    states[23] = new State(new int[]{27,27,14,28,17,29},new int[]{-13,24,-14,34});
    states[24] = new State(new int[]{23,25,21,-16,22,-16,25,-16,26,-16,3,-16,20,-16,18,-16});
    states[25] = new State(new int[]{27,27,14,28,17,29},new int[]{-14,26});
    states[26] = new State(-19);
    states[27] = new State(-20);
    states[28] = new State(-21);
    states[29] = new State(new int[]{27,27,14,28,17,29},new int[]{-12,30,-13,35,-14,34});
    states[30] = new State(new int[]{18,31,21,23,22,32});
    states[31] = new State(-22);
    states[32] = new State(new int[]{27,27,14,28,17,29},new int[]{-13,33,-14,34});
    states[33] = new State(new int[]{23,25,21,-17,22,-17,25,-17,26,-17,3,-17,20,-17,18,-17});
    states[34] = new State(-18);
    states[35] = new State(new int[]{23,25,21,-15,22,-15,25,-15,26,-15,3,-15,20,-15,18,-15});
    states[36] = new State(new int[]{27,27,14,28,17,29,26,-12,3,-12,20,-12},new int[]{-11,37,-12,22,-13,35,-14,34});
    states[37] = new State(-14);
    states[38] = new State(-7);
    states[39] = new State(-8);
    states[40] = new State(new int[]{27,41});
    states[41] = new State(new int[]{27,48,10,49,15,51},new int[]{-19,42,-20,54,-21,55});
    states[42] = new State(new int[]{12,44,26,56},new int[]{-5,43});
    states[43] = new State(-33);
    states[44] = new State(new int[]{27,48,10,49,15,51},new int[]{-20,45,-21,55});
    states[45] = new State(new int[]{11,46,12,-35,26,-35,16,-35});
    states[46] = new State(new int[]{27,48,10,49,15,51},new int[]{-21,47});
    states[47] = new State(-37);
    states[48] = new State(-38);
    states[49] = new State(new int[]{27,48,10,49,15,51},new int[]{-21,50});
    states[50] = new State(-39);
    states[51] = new State(new int[]{27,48,10,49,15,51},new int[]{-19,52,-20,54,-21,55});
    states[52] = new State(new int[]{16,53,12,44});
    states[53] = new State(-40);
    states[54] = new State(new int[]{11,46,12,-34,26,-34,16,-34});
    states[55] = new State(-36);
    states[56] = new State(new int[]{26,56,27,-47,6,-47,4,-47,9,-47,20,-47,3,-47},new int[]{-5,57});
    states[57] = new State(-48);
    states[58] = new State(-9);
    states[59] = new State(new int[]{27,65},new int[]{-22,60,-23,62});
    states[60] = new State(new int[]{26,56},new int[]{-5,61});
    states[61] = new State(-41);
    states[62] = new State(new int[]{5,63,26,-44});
    states[63] = new State(new int[]{27,64});
    states[64] = new State(-43);
    states[65] = new State(new int[]{27,65,5,-45,26,-45},new int[]{-23,66});
    states[66] = new State(-46);
    states[67] = new State(-10);
    states[68] = new State(new int[]{27,65},new int[]{-22,69,-23,62});
    states[69] = new State(new int[]{26,56},new int[]{-5,70});
    states[70] = new State(-42);
    states[71] = new State(new int[]{26,56},new int[]{-5,72});
    states[72] = new State(new int[]{27,20,6,40,4,59,9,68,20,-2},new int[]{-1,73,-3,3,-4,17,-6,6,-15,7,-17,18,-7,38,-8,39,-9,58,-10,67});
    states[73] = new State(new int[]{20,74});
    states[74] = new State(-24);
    states[75] = new State(new int[]{25,76,16,-30});
    states[76] = new State(new int[]{27,77});
    states[77] = new State(new int[]{27,78});
    states[78] = new State(-32);
    states[79] = new State(new int[]{27,80});
    states[80] = new State(-31);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{});
    rules[3] = new Rule(-1, new int[]{-3});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-3, new int[]{-3,-5,-4});
    rules[6] = new Rule(-4, new int[]{-6});
    rules[7] = new Rule(-4, new int[]{-7});
    rules[8] = new Rule(-4, new int[]{-8});
    rules[9] = new Rule(-4, new int[]{-9});
    rules[10] = new Rule(-4, new int[]{-10});
    rules[11] = new Rule(-7, new int[]{27,-11});
    rules[12] = new Rule(-11, new int[]{});
    rules[13] = new Rule(-11, new int[]{-12});
    rules[14] = new Rule(-11, new int[]{-12,25,-11});
    rules[15] = new Rule(-12, new int[]{-13});
    rules[16] = new Rule(-12, new int[]{-12,21,-13});
    rules[17] = new Rule(-12, new int[]{-12,22,-13});
    rules[18] = new Rule(-13, new int[]{-14});
    rules[19] = new Rule(-13, new int[]{-13,23,-14});
    rules[20] = new Rule(-14, new int[]{27});
    rules[21] = new Rule(-14, new int[]{14});
    rules[22] = new Rule(-14, new int[]{17,-12,18});
    rules[23] = new Rule(-6, new int[]{-15,27,15,-16,16,27,19,-5,-1,20});
    rules[24] = new Rule(-6, new int[]{-15,27,15,-16,16,19,-5,-1,20});
    rules[25] = new Rule(-15, new int[]{});
    rules[26] = new Rule(-15, new int[]{-17});
    rules[27] = new Rule(-17, new int[]{27});
    rules[28] = new Rule(-17, new int[]{-17,27});
    rules[29] = new Rule(-16, new int[]{});
    rules[30] = new Rule(-16, new int[]{-18});
    rules[31] = new Rule(-18, new int[]{27,27});
    rules[32] = new Rule(-18, new int[]{-18,25,27,27});
    rules[33] = new Rule(-8, new int[]{6,27,-19,-5});
    rules[34] = new Rule(-19, new int[]{-20});
    rules[35] = new Rule(-19, new int[]{-19,12,-20});
    rules[36] = new Rule(-20, new int[]{-21});
    rules[37] = new Rule(-20, new int[]{-20,11,-21});
    rules[38] = new Rule(-21, new int[]{27});
    rules[39] = new Rule(-21, new int[]{10,-21});
    rules[40] = new Rule(-21, new int[]{15,-19,16});
    rules[41] = new Rule(-9, new int[]{4,-22,-5});
    rules[42] = new Rule(-10, new int[]{9,-22,-5});
    rules[43] = new Rule(-22, new int[]{-23,5,27});
    rules[44] = new Rule(-22, new int[]{-23});
    rules[45] = new Rule(-23, new int[]{27});
    rules[46] = new Rule(-23, new int[]{27,-23});
    rules[47] = new Rule(-5, new int[]{26});
    rules[48] = new Rule(-5, new int[]{26,-5});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 5: // non_empty_block -> non_empty_block, new_lines, code_line
#line 13 "asm_file.y"
                                               {Console.Output(ValueStack[ValueStack.Depth-3]);}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 99 "asm_file.y"
public Parser(Stream file) : base(new Scanner(file)) { }
#line default
}
}
